name: Release

on:
  push:
  pull_request:

jobs:
  codecov:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Run tests and collect coverage
        run: pnpm run coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info

  release:
    runs-on: ubuntu-latest
    needs: codecov
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install pnpm
        run: npm install -g pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Run Build
        run: pnpm build
      - name: Publish to npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish to GitHub Packages
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc
          pnpm publish --registry=https://npm.pkg.github.com --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get commits between tags
        id: commits
        run: |
          # 获取最近两个 tag 之间的提交
          TAGS=$(git tag -l 'v*' | sort -V | tail -n 2)
          FROM_TAG=$(echo "$TAGS" | head -n 1)
          TO_TAG=$(echo "$TAGS" | tail -n 1)

          echo "Comparing commits between $FROM_TAG and $TO_TAG"

          # 获取提交日志并根据类型格式化
          COMMITS=$(git log --oneline $FROM_TAG..$TO_TAG --pretty=format:"%s")

          # 格式化并按提交类型分组
          FEAT_COMMITS=$(echo "$COMMITS" | grep -i "^feat" | sed 's/^feat: //')
          FIX_COMMITS=$(echo "$COMMITS" | grep -i "^fix" | sed 's/^fix: //')
          CHORE_COMMITS=$(echo "$COMMITS" | grep -i "^chore" | sed 's/^chore: //')
          DOC_COMMITS=$(echo "$COMMITS" | grep -i "^docs" | sed 's/^docs: //')

          # 组合成一个完整的 release note
          RELEASE_NOTES=""
          if [ -n "$FEAT_COMMITS" ]; then
            RELEASE_NOTES="${RELEASE_NOTES}\n### 🎉 Features\n${FEAT_COMMITS}\n"
          fi
          if [ -n "$FIX_COMMITS" ]; then
            RELEASE_NOTES="${RELEASE_NOTES}\n### 🐞 Bug Fixes\n${FIX_COMMITS}\n"
          fi
          if [ -n "$CHORE_COMMITS" ]; then
            RELEASE_NOTES="${RELEASE_NOTES}\n### 🔧 Chores\n${CHORE_COMMITS}\n"
          fi
          if [ -n "$DOC_COMMITS" ]; then
            RELEASE_NOTES="${RELEASE_NOTES}\n### 📚 Documentation\n${DOC_COMMITS}\n"
          fi

          # 输出 release notes 作为 action output
          echo "::set-output name=release_notes::$RELEASE_NOTES"
      - name: Generate Release Notes
        run: |
          echo "Release Notes for ${{ steps.commits.outputs.release_notes }}"
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
          release_notes: ${{ steps.commits.outputs.release_notes }}
